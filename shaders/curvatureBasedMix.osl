shader CurvatureBasedMix2(
    color smoothShader = color(1.0, 1.0, 1.0),  // Color del shader suave (por ejemplo, blanco)
    color blackRubberShader = color(0.1, 0.1, 0.1), // Color para el "blackrubber" (gris oscuro)
    string curvatureMap = "textures/test-2.tex",  // Ruta al mapa de curvatura
    float thresholdOuter = 0.3,  // Umbral para áreas exteriores (suavizado)
    float thresholdInner = 0.7,  // Umbral para áreas interiores (más oscuras)
    point Pc = point(0.0, 0.0, 0.0),  // Coordenadas del punto
    output color result = color(0.0, 0.0, 0.0)  // Resultado del color final
)
{
    // Convertir las coordenadas del punto P en un vector 2D (UV)
    vector st = vector(Pc.x, Pc.y, 0.0);  // Usamos las componentes x e y de P como UVs
    
    // Muestrear el mapa de curvatura usando las coordenadas UV y obtener el canal rojo (un valor de float)
    color curvatureColor = texture(curvatureMap, st.x, st.y);  // Usamos las componentes x e y directamente
    
    // Extraer el canal rojo (o cualquiera de los otros canales)
    float curvature = curvatureColor.r;  // Accedemos solo al canal rojo del color

    // Normalizar la curvatura para que esté entre 0 y 1 (si es necesario)
    // Asegúrate de que el valor de curvatura está en el rango esperado (de 0 a 1)
    curvature = (curvature - 0.0) / (1.0 - 0.0);  // Normalizar entre 0 y 1 (ajusta estos valores según tu mapa)

    // Imprimir el valor de curvatura para depuración
    printf("Curvature value: %f\n", curvature);  // Depuración

    // Aplicar el shader apropiado según el valor de curvatura
    if (curvature < thresholdOuter)
    {
        result = smoothShader;  // Si la curvatura es baja (por debajo del umbral exterior), aplicamos el shader suave
    }
    else if (curvature >= thresholdOuter && curvature <= thresholdInner)
    {
        result = blackRubberShader;   // Si la curvatura está en el rango intermedio (bordes de la mancuerna)
    }
    else
    {
        result = smoothShader;   // Si la curvatura es alta (por encima del umbral interior), aplicamos el shader suave
    }
}
