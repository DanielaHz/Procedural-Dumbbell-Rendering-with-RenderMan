OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: 
shader proceduralScratch2
param	float	scale	100		%read{2,6} %write{2147483647,-1}
param	float	thickness	0.00999999978		%read{12,12} %write{2147483647,-1}
param	float	noiseStrength	1		%read{8,8} %write{2147483647,-1}
param	color	scratchColor	1 1 1		%read{13,13} %write{2147483647,-1}
param	color	baseColor	0.100000001 0.100000001 0.100000001		%read{13,13} %write{2147483647,-1}
oparam	color	result	0 0 0		%read{2147483647,-1} %write{13,13}
global	float	u	%read{0,0} %write{2147483647,-1}
global	float	v	%read{1,1} %write{2147483647,-1}
local	float	s	%read{2,6} %write{0,0}
local	float	t	%read{3,3} %write{1,1}
local	float	offset	%read{8,8} %write{5,5}
local	float	pattern	%read{11,11} %write{10,10}
local	float	scratchMask	%read{13,13} %write{12,12}
const	string	$const1	"perlin"		%read{5,5} %write{2147483647,-1}
temp	point	$tmp1	%read{5,5} %write{4,4}
temp	float	$tmp2	%read{4,4} %write{2,2}
temp	float	$tmp3	%read{4,4} %write{3,3}
const	float	$const3	0		%read{4,12} %write{2147483647,-1}
temp	float	$tmp4	%read{7,7} %write{6,6}
const	float	$const4	3.14159274		%read{7,7} %write{2147483647,-1}
temp	float	$tmp5	%read{9,9} %write{7,7}
temp	float	$tmp6	%read{9,9} %write{8,8}
temp	float	$tmp7	%read{10,10} %write{9,9}
temp	float	$tmp8	%read{12,12} %write{11,11}
code ___main___
# proceduralScratch.osl:11
#     float s = u;
	assign		s u 	%filename{"proceduralScratch.osl"} %line{11} %argrw{"wr"}
# proceduralScratch.osl:12
#     float t = v;
	assign		t v 	%line{12} %argrw{"wr"}
# proceduralScratch.osl:15
#     float offset = noise("perlin", point(s * scale, t * scale, 0));
	mul		$tmp2 s scale 	%line{15} %argrw{"wrr"}
	mul		$tmp3 t scale 	%argrw{"wrr"}
	point		$tmp1 $tmp2 $tmp3 $const3 	%argrw{"wrrr"}
	noise		offset $const1 $tmp1 	%argrw{"wrr"}
# proceduralScratch.osl:18
#     float pattern = sin(s * scale * M_PI + offset * noiseStrength);
	mul		$tmp4 s scale 	%line{18} %argrw{"wrr"}
	mul		$tmp5 $tmp4 $const4 	%argrw{"wrr"}
	mul		$tmp6 offset noiseStrength 	%argrw{"wrr"}
	add		$tmp7 $tmp5 $tmp6 	%argrw{"wrr"}
	sin		pattern $tmp7 	%argrw{"wr"}
# proceduralScratch.osl:21
#     float scratchMask = smoothstep(thickness, 0.0, abs(pattern));
	abs		$tmp8 pattern 	%line{21} %argrw{"wr"}
	smoothstep	scratchMask thickness $const3 $tmp8 	%argrw{"wrrr"}
# proceduralScratch.osl:24
#     result = mix(baseColor, scratchColor, scratchMask);
	mix		result baseColor scratchColor scratchMask 	%line{24} %argrw{"wrrr"}
	end
