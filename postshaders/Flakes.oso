OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: 
shader Flakes	%meta{string,help,"Creates Paint Flake Noise Pattern"} %meta{string,label,"Flakes"} 
param	float	scale	0.200000003		%meta{string,label,"Scale"} %meta{string,page,"Flakes"} %meta{float,min,0} %meta{float,max,25}  %read{27,27} %write{2147483647,-1}
param	float	density	1		%meta{string,page,"Flakes"} %meta{string,label,"Density"} %meta{float,min,0} %meta{float,max,1}  %read{187,187} %write{2147483647,-1}
param	float	randomize	0.5		%meta{string,page,"Flakes"} %meta{string,label,"Randomize"} %meta{float,min,0} %meta{float,max,1}  %read{205,205} %write{2147483647,-1}
param	int	seed	42		%meta{string,page,"Flakes"} %meta{string,label,"Seed"} %meta{int,min,0} %meta{int,max,100}  %read{71,71} %write{2147483647,-1}
param	int	c_space	0		%meta{string,page,"Flakes"} %meta{string,label,"Coordinate Space"} %meta{string,widget,"mapper"} %meta{string,options,"object:0|world:1|UV:2"}  %read{2,8} %write{2147483647,-1}
param	int	Tiling	0		%meta{string,page,"Tiles"} %meta{string,widget,"checkBox"} %meta{string,label,"Seamless Tiling"} %meta{string,widget,"null"} %meta{int,connectable,0}  %read{16,59} %write{2147483647,-1}
param	int	tileSize	10		%meta{string,page,"Tiles"} %meta{string,label,"Tile Size"} %meta{int,min,10} %meta{int,max,50} %meta{int,connectable,0}  %read{24,62} %write{2147483647,-1}
oparam	normal	outColor	0 0 0		%read{126,205} %write{125,205}
oparam	float	outAlpha	0		%read{202,204} %write{201,203}
global	point	P	%read{0,0} %write{2147483647,-1}
global	float	u	%read{1,1} %write{2147483647,-1}
global	float	v	%read{1,1} %write{2147483647,-1}
local	vector	___346_n	%read{42,94} %write{36,36}
local	vector	___346_f	%read{42,94} %write{38,38}
local	vector	___346_m	%read{42,101} %write{39,94}
local	vector	___346_o	%read{42,94} %write{42,94}
local	int	___347_k	%read{42,94} %write{41,94}
local	int	___349_j	%read{42,94} %write{42,94}
local	int	___351_i	%read{42,94} %write{42,94}
local	vector	___352_g	%read{42,94} %write{42,94}
local	vector	___352_r	%read{42,94} %write{42,94}
local	float	___352_s	%read{42,94} %write{42,94}
local	float	___353_x_ratio	%read{138,168} %write{137,167}
local	string	mode	%read{5,14} %write{4,6}
local	point	pos	%read{12,33} %write{11,25}
local	point	s	%read{14,14} %write{0,0}
local	vector	t	%read{11,18} %write{1,1}
local	float	sc	%read{30,33} %write{27,31}
local	point	p	%read{36,38} %write{33,33}
local	vector	Base_Normal	%read{190,205} %write{34,34}
local	vector	k	%read{105,115} %write{103,103}
local	float	x	%read{120,120} %write{109,109}
local	float	y	%read{120,120} %write{114,114}
local	float	z	%read{120,120} %write{119,119}
local	float	h	%read{178,181} %write{177,180}
local	float	Rehash	%read{186,187} %write{185,186}
const	int	$const1	0		%read{2,203} %write{2147483647,-1}
const	float	$const2	0		%read{1,186} %write{2147483647,-1}
temp	string	$tmp1	%read{2147483647,-1} %write{5,7}
temp	int	$tmp2	%read{3,3} %write{2,2}
const	string	$const3	"object"		%read{4,18} %write{2147483647,-1}
const	string	$const4	"world"		%read{6,6} %write{2147483647,-1}
temp	point	$tmp3	%read{2147483647,-1} %write{12,15}
const	int	$const5	2		%read{8,174} %write{2147483647,-1}
temp	int	$tmp4	%read{9,9} %write{8,8}
const	string	$const6	"transform"		%read{10,17} %write{2147483647,-1}
const	string	$const7	"common"		%read{11,18} %write{2147483647,-1}
temp	point	$tmp5	%read{2147483647,-1} %write{19,20}
temp	point	$tmp6	%read{2147483647,-1} %write{23,26}
temp	int	$tmp7	%read{22,22} %write{21,21}
temp	point	$tmp8	%read{25,25} %write{24,24}
temp	float	$tmp9	%read{2147483647,-1} %write{30,32}
temp	int	$tmp10	%read{29,29} %write{28,28}
const	float	$const8	1		%read{31,186} %write{2147483647,-1}
const	vector	$const9	0.5 0.5 1		%read{34,34} %write{2147483647,-1}
const	string	$const10	"ID"		%read{35,35} %write{2147483647,-1}
temp	vector	$tmp11	%read{38,38} %write{37,37}
const	vector	$const11	8 8 8		%read{39,39} %write{2147483647,-1}
const	int	$const12	-1		%read{41,49} %write{2147483647,-1}
const	int	$const13	1		%read{42,201} %write{2147483647,-1}
temp	int	$tmp12	%read{42,94} %write{42,94}
temp	int	$tmp13	%read{40,94} %write{41,94}
temp	int	$tmp14	%read{42,94} %write{42,94}
temp	int	$tmp15	%read{42,94} %write{42,94}
temp	int	$tmp16	%read{42,94} %write{42,94}
temp	int	$tmp17	%read{42,94} %write{42,94}
temp	float	$tmp18	%read{42,94} %write{42,94}
temp	float	$tmp19	%read{42,94} %write{42,94}
temp	float	$tmp20	%read{42,94} %write{42,94}
temp	float	$tmp21	%read{42,94} %write{42,94}
temp	float	$tmp22	%read{42,94} %write{42,94}
temp	float	$tmp23	%read{42,94} %write{42,94}
temp	vector	$tmp24	%read{2147483647,-1} %write{42,94}
temp	vector	$tmp25	%read{42,94} %write{42,94}
const	string	$const14	"TileHash"		%read{61,61} %write{2147483647,-1}
temp	float	$tmp26	%read{42,94} %write{42,94}
const	string	$const15	"mod"		%read{63,63} %write{2147483647,-1}
temp	vector	$tmp27	%read{42,94} %write{42,94}
temp	vector	$tmp28	%read{42,94} %write{42,94}
temp	vector	$tmp29	%read{42,94} %write{42,94}
const	string	$const16	"hash"		%read{68,72} %write{2147483647,-1}
temp	vector	$tmp30	%read{42,94} %write{42,94}
temp	float	$tmp31	%read{42,94} %write{42,94}
temp	vector	$tmp32	%read{42,94} %write{42,94}
const	float	$const17	0.5		%read{77,197} %write{2147483647,-1}
temp	vector	$tmp33	%read{42,94} %write{42,94}
const	float	$const18	6.28318548		%read{75,116} %write{2147483647,-1}
temp	vector	$tmp34	%read{42,94} %write{42,94}
temp	vector	$tmp35	%read{42,94} %write{42,94}
temp	vector	$tmp36	%read{42,94} %write{42,94}
temp	vector	$tmp37	%read{2147483647,-1} %write{42,94}
temp	float	$tmp38	%read{42,94} %write{42,94}
temp	int	$tmp39	%read{42,94} %write{42,94}
temp	float	$tmp40	%read{42,94} %write{42,94}
temp	float	$tmp41	%read{42,94} %write{42,94}
temp	int	$tmp42	%read{2147483647,-1} %write{42,94}
temp	int	$tmp43	%read{2147483647,-1} %write{42,94}
temp	int	$tmp44	%read{2147483647,-1} %write{42,94}
temp	float	$tmp45	%read{103,103} %write{96,96}
temp	float	$tmp46	%read{96,96} %write{95,95}
temp	float	$tmp47	%read{99,99} %write{97,97}
temp	float	$tmp48	%read{99,99} %write{98,98}
temp	float	$tmp49	%read{103,103} %write{99,99}
temp	float	$tmp50	%read{102,102} %write{100,100}
temp	float	$tmp51	%read{102,102} %write{101,101}
temp	float	$tmp52	%read{103,103} %write{102,102}
temp	float	$tmp53	%read{108,108} %write{107,107}
temp	float	$tmp54	%read{106,106} %write{105,105}
temp	float	$tmp55	%read{107,107} %write{106,106}
temp	float	$tmp56	%read{109,109} %write{108,108}
temp	float	$tmp57	%read{113,113} %write{112,112}
temp	float	$tmp58	%read{111,111} %write{110,110}
temp	float	$tmp59	%read{112,112} %write{111,111}
temp	float	$tmp60	%read{114,114} %write{113,113}
temp	float	$tmp61	%read{118,118} %write{117,117}
temp	float	$tmp62	%read{116,116} %write{115,115}
temp	float	$tmp63	%read{117,117} %write{116,116}
temp	float	$tmp64	%read{119,119} %write{118,118}
temp	vector	$tmp65	%read{124,124} %write{123,123}
temp	vector	$tmp66	%read{121,121} %write{120,120}
temp	vector	$tmp67	%read{122,122} %write{121,121}
const	float	$const19	2		%read{121,121} %write{2147483647,-1}
temp	vector	$tmp68	%read{123,123} %write{122,122}
temp	vector	$tmp69	%read{125,125} %write{124,124}
temp	float	$tmp70	%read{140,140} %write{138,138}
temp	float	$tmp71	%read{128,139} %write{126,132}
const	int	$const20	4		%read{134,149} %write{2147483647,-1}
const	string	$const21	"IDs"		%read{127,157} %write{2147483647,-1}
temp	float	$tmp72	%read{129,129} %write{128,128}
const	float	$const24	2000		%read{128,176} %write{2147483647,-1}
const	float	$const25	-1000		%read{129,177} %write{2147483647,-1}
temp	int	$tmp73	%read{132,132} %write{131,131}
temp	float	$tmp74	%read{131,131} %write{130,130}
const	string	$const26	"cell"		%read{137,185} %write{2147483647,-1}
temp	vector	$tmp75	%read{137,137} %write{136,136}
temp	float	$tmp76	%read{136,136} %write{133,133}
temp	int	$tmp77	%read{135,135} %write{134,134}
temp	float	$tmp78	%read{136,136} %write{135,135}
const	float	$const28	11		%read{136,184} %write{2147483647,-1}
temp	float	$tmp79	%read{155,155} %write{153,153}
temp	float	$tmp80	%read{143,154} %write{141,147}
temp	float	$tmp81	%read{144,144} %write{143,143}
temp	int	$tmp82	%read{147,147} %write{146,146}
temp	float	$tmp83	%read{146,146} %write{145,145}
temp	vector	$tmp84	%read{152,152} %write{151,151}
temp	float	$tmp85	%read{151,151} %write{148,148}
temp	int	$tmp86	%read{150,150} %write{149,149}
temp	float	$tmp87	%read{151,151} %write{150,150}
temp	float	$tmp88	%read{170,170} %write{168,168}
temp	float	$tmp89	%read{158,169} %write{156,162}
temp	float	$tmp90	%read{159,159} %write{158,158}
temp	int	$tmp91	%read{162,162} %write{161,161}
temp	float	$tmp92	%read{161,161} %write{160,160}
temp	vector	$tmp93	%read{167,167} %write{166,166}
temp	float	$tmp94	%read{166,166} %write{163,163}
temp	int	$tmp95	%read{165,165} %write{164,164}
temp	float	$tmp96	%read{166,166} %write{165,165}
temp	float	$tmp97	%read{172,172} %write{171,171}
temp	float	$tmp98	%read{173,173} %write{172,172}
temp	float	$tmp99	%read{174,174} %write{173,173}
temp	float	$tmp100	%read{176,176} %write{175,175}
temp	float	$tmp101	%read{177,177} %write{176,176}
temp	int	$tmp102	%read{180,180} %write{179,179}
temp	float	$tmp103	%read{179,179} %write{178,178}
temp	vector	$tmp104	%read{185,185} %write{184,184}
temp	float	$tmp105	%read{184,184} %write{181,181}
temp	int	$tmp106	%read{183,183} %write{182,182}
const	int	$const29	16		%read{182,182} %write{2147483647,-1}
temp	float	$tmp107	%read{184,184} %write{183,183}
temp	normal	$tmp108	%read{2147483647,-1} %write{189,191}
temp	int	$tmp109	%read{188,188} %write{187,187}
temp	float	$tmp110	%read{2147483647,-1} %write{202,204}
temp	float	$tmp111	%read{193,193} %write{192,192}
temp	int	$tmp112	%read{194,194} %write{193,193}
temp	int	$tmp113	%read{195,200} %write{194,199}
temp	float	$tmp114	%read{197,197} %write{196,196}
temp	int	$tmp115	%read{198,198} %write{197,197}
temp	int	$tmp116	%read{199,199} %write{198,198}
code ___main___
# shaders/Flakes.osl:117
# 	point pos, s = P;
	assign		s P 	%filename{"shaders/Flakes.osl"} %line{117} %argrw{"wr"}
# shaders/Flakes.osl:118
# 	vector t = vector(u,v,0); 
	vector		t u v $const2 	%line{118} %argrw{"wrrr"}
# shaders/Flakes.osl:120
# 	c_space == 0 ? mode = "object" : mode = "world";
	eq		$tmp2 c_space $const1 	%line{120} %argrw{"wrr"}
	if		$tmp2 6 8 	%argrw{"r"}
	assign		mode $const3 	%argrw{"wr"}
	assign		$tmp1 mode 	%argrw{"wr"}
	assign		mode $const4 	%argrw{"wr"}
	assign		$tmp1 mode 	%argrw{"wr"}
# shaders/Flakes.osl:121
# 	c_space == 2 ? pos = transform("object",t) : pos = transform(mode,s);
	eq		$tmp4 c_space $const5 	%line{121} %argrw{"wrr"}
	if		$tmp4 13 16 	%argrw{"r"}
	functioncall	$const6 12 	%argrw{"r"}
# /opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h:262
# vector transform (string to, vector p) { return transform("common",to,p); }
	transformv	pos $const7 $const3 t 	%filename{"/opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h"} %line{262} %argrw{"wrrr"}
# shaders/Flakes.osl:121
# 	c_space == 2 ? pos = transform("object",t) : pos = transform(mode,s);
	assign		$tmp3 pos 	%filename{"shaders/Flakes.osl"} %line{121} %argrw{"wr"}
	functioncall	$const6 15 	%argrw{"r"}
# /opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h:263
# point  transform (string to, point p)  { return transform("common",to,p); }
	transform	pos $const7 mode s 	%filename{"/opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h"} %line{263} %argrw{"wrrr"}
# shaders/Flakes.osl:121
# 	c_space == 2 ? pos = transform("object",t) : pos = transform(mode,s);
	assign		$tmp3 pos 	%filename{"shaders/Flakes.osl"} %line{121} %argrw{"wr"}
# shaders/Flakes.osl:122
# 	Tiling ? pos = transform("object",t):0;
	if		Tiling 20 21 	%line{122} %argrw{"r"}
	functioncall	$const6 19 	%argrw{"r"}
# /opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h:262
# vector transform (string to, vector p) { return transform("common",to,p); }
	transformv	pos $const7 $const3 t 	%filename{"/opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h"} %line{262} %argrw{"wrrr"}
# shaders/Flakes.osl:122
# 	Tiling ? pos = transform("object",t):0;
	assign		$tmp5 pos 	%filename{"shaders/Flakes.osl"} %line{122} %argrw{"wr"}
	assign		$tmp5 $const1 	%argrw{"wr"}
# shaders/Flakes.osl:125
# 	!Tiling ? pos = pos : pos = pos*tileSize;
	eq		$tmp7 Tiling $const1 	%line{125} %argrw{"wrr"}
	if		$tmp7 24 27 	%argrw{"r"}
	assign		$tmp6 pos 	%argrw{"wr"}
	assign		$tmp8 tileSize 	%argrw{"wr"}
	mul		pos pos $tmp8 	%argrw{"wrr"}
	assign		$tmp6 pos 	%argrw{"wr"}
# shaders/Flakes.osl:126
# 	float sc = scale;
	assign		sc scale 	%line{126} %argrw{"wr"}
# shaders/Flakes.osl:127
# 	!Tiling ? sc = sc : sc = 1.0;
	eq		$tmp10 Tiling $const1 	%line{127} %argrw{"wrr"}
	if		$tmp10 31 33 	%argrw{"r"}
	assign		$tmp9 sc 	%argrw{"wr"}
	assign		sc $const8 	%argrw{"wr"}
	assign		$tmp9 sc 	%argrw{"wr"}
# shaders/Flakes.osl:130
# 	point p = (pos)/sc;
	div		p pos sc 	%line{130} %argrw{"wrr"}
# shaders/Flakes.osl:133
# 	vector Base_Normal = vector(0.5,0.5,1.0);
	assign		Base_Normal $const9 	%line{133} %argrw{"wr"}
# shaders/Flakes.osl:136
#     vector k = ID( p,seed,Tiling,tileSize );
	functioncall	$const10 105 	%line{136} %argrw{"r"}
# shaders/Flakes.osl:16
#     vector n = floor(x);
	floor		___346_n p 	%line{16} %argrw{"wr"}
# shaders/Flakes.osl:17
#     vector f = x-floor(x);
	floor		$tmp11 p 	%line{17} %argrw{"wr"}
	sub		___346_f p $tmp11 	%argrw{"wrr"}
# shaders/Flakes.osl:18
#     vector m = vector(8);
	assign		___346_m $const11 	%line{18} %argrw{"wr"}
# shaders/Flakes.osl:20
#     for( int k=-1; k<=1; k++ ){
	for		$tmp13 42 44 93 95 	%line{20} %argrw{"r"}
	assign		___347_k $const12 	%argrw{"wr"}
	le		$tmp12 ___347_k $const13 	%argrw{"wrr"}
	neq		$tmp13 $tmp12 $const1 	%argrw{"wrr"}
# shaders/Flakes.osl:21
#     for( int j=-1; j<=1; j++ ){
	for		$tmp15 46 48 91 93 	%line{21} %argrw{"r"}
	assign		___349_j $const12 	%argrw{"wr"}
	le		$tmp14 ___349_j $const13 	%argrw{"wrr"}
	neq		$tmp15 $tmp14 $const1 	%argrw{"wrr"}
# shaders/Flakes.osl:22
#     for( int i=-1; i<=1; i++ ){
	for		$tmp17 50 52 89 91 	%line{22} %argrw{"r"}
	assign		___351_i $const12 	%argrw{"wr"}
	le		$tmp16 ___351_i $const13 	%argrw{"wrr"}
	neq		$tmp17 $tmp16 $const1 	%argrw{"wrr"}
# shaders/Flakes.osl:24
#     	vector g = vector( float(i), float(j),float(k) );  	
	assign		$tmp19 ___351_i 	%line{24} %argrw{"wr"}
	assign		$tmp18 $tmp19 	%argrw{"wr"}
	assign		$tmp21 ___349_j 	%argrw{"wr"}
	assign		$tmp20 $tmp21 	%argrw{"wr"}
	assign		$tmp23 ___347_k 	%argrw{"wr"}
	assign		$tmp22 $tmp23 	%argrw{"wr"}
	vector		___352_g $tmp18 $tmp20 $tmp22 	%argrw{"wrrr"}
# shaders/Flakes.osl:25
#     	Tiling? o = TileHash(n+g,tileSize) : o = noise("hash",n+g,seed);
	if		Tiling 70 74 	%line{25} %argrw{"r"}
	add		$tmp25 ___346_n ___352_g 	%argrw{"wrr"}
	functioncall	$const14 69 	%argrw{"r"}
# shaders/Flakes.osl:10
# 	x = mod(x,tileSize);
	assign		$tmp26 tileSize 	%line{10} %argrw{"wr"}
	functioncall	$const15 68 	%argrw{"r"}
# /opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h:129
# vector mod (vector a, float  b) { return a - b*floor(a/b); }
	div		$tmp28 $tmp25 $tmp26 	%filename{"/opt/pixar/RenderManProServer-26.2/lib/osl/include/stdosl.h"} %line{129} %argrw{"wrr"}
	floor		$tmp27 $tmp28 	%argrw{"wr"}
	mul		$tmp29 $tmp26 $tmp27 	%argrw{"wrr"}
	sub		$tmp25 $tmp25 $tmp29 	%argrw{"wrr"}
# shaders/Flakes.osl:11
# 	return noise("hash",x);
	noise		___346_o $const16 $tmp25 	%filename{"shaders/Flakes.osl"} %line{11} %argrw{"wrr"}
# shaders/Flakes.osl:25
#     	Tiling? o = TileHash(n+g,tileSize) : o = noise("hash",n+g,seed);
	assign		$tmp24 ___346_o 	%line{25} %argrw{"wr"}
	add		$tmp30 ___346_n ___352_g 	%argrw{"wrr"}
	assign		$tmp31 seed 	%argrw{"wr"}
	noise		___346_o $const16 $tmp30 $tmp31 	%argrw{"wrrr"}
	assign		$tmp24 ___346_o 	%argrw{"wr"}
# shaders/Flakes.osl:26
#         vector r = g - f + (0.5+0.5*sin(M_2PI*o));
	sub		$tmp32 ___352_g ___346_f 	%line{26} %argrw{"wrr"}
	mul		$tmp34 $const18 ___346_o 	%argrw{"wrr"}
	sin		$tmp33 $tmp34 	%argrw{"wr"}
	mul		$tmp35 $const17 $tmp33 	%argrw{"wrr"}
	add		$tmp36 $const17 $tmp35 	%argrw{"wrr"}
	add		___352_r $tmp32 $tmp36 	%argrw{"wrr"}
# shaders/Flakes.osl:27
#         float s = dot(r, r);      
	dot		___352_s ___352_r ___352_r 	%line{27} %argrw{"wrr"}
# shaders/Flakes.osl:28
#         s<m[0] ? m = vector(s, o[0], o[1]):0;
	compref		$tmp38 ___346_m $const1 	%line{28} %argrw{"wrr"}
	lt		$tmp39 ___352_s $tmp38 	%argrw{"wrr"}
	if		$tmp39 88 89 	%argrw{"r"}
	compref		$tmp40 ___346_o $const1 	%argrw{"wrr"}
	compref		$tmp41 ___346_o $const13 	%argrw{"wrr"}
	vector		___346_m ___352_s $tmp40 $tmp41 	%argrw{"wrrr"}
	assign		$tmp37 ___346_m 	%argrw{"wr"}
	assign		$tmp37 $const1 	%argrw{"wr"}
# shaders/Flakes.osl:22
#     for( int i=-1; i<=1; i++ ){
	assign		$tmp42 ___351_i 	%line{22} %argrw{"wr"}
	add		___351_i ___351_i $const13 	%argrw{"wrr"}
# shaders/Flakes.osl:21
#     for( int j=-1; j<=1; j++ ){
	assign		$tmp43 ___349_j 	%line{21} %argrw{"wr"}
	add		___349_j ___349_j $const13 	%argrw{"wrr"}
# shaders/Flakes.osl:20
#     for( int k=-1; k<=1; k++ ){
	assign		$tmp44 ___347_k 	%line{20} %argrw{"wr"}
	add		___347_k ___347_k $const13 	%argrw{"wrr"}
# shaders/Flakes.osl:31
#     return vector( sqrt(m[0]), m[1]+m[2], m[1]+m[0]);
	compref		$tmp46 ___346_m $const1 	%line{31} %argrw{"wrr"}
	sqrt		$tmp45 $tmp46 	%argrw{"wr"}
	compref		$tmp47 ___346_m $const13 	%argrw{"wrr"}
	compref		$tmp48 ___346_m $const5 	%argrw{"wrr"}
	add		$tmp49 $tmp47 $tmp48 	%argrw{"wrr"}
	compref		$tmp50 ___346_m $const13 	%argrw{"wrr"}
	compref		$tmp51 ___346_m $const1 	%argrw{"wrr"}
	add		$tmp52 $tmp50 $tmp51 	%argrw{"wrr"}
	vector		k $tmp45 $tmp49 $tmp52 	%argrw{"wrrr"}
	return
# shaders/Flakes.osl:139
#     float x = 0.5 + 0.5 * cos( k[1]*M_2PI );
	compref		$tmp54 k $const13 	%line{139} %argrw{"wrr"}
	mul		$tmp55 $tmp54 $const18 	%argrw{"wrr"}
	cos		$tmp53 $tmp55 	%argrw{"wr"}
	mul		$tmp56 $const17 $tmp53 	%argrw{"wrr"}
	add		x $const17 $tmp56 	%argrw{"wrr"}
# shaders/Flakes.osl:140
#     float y = 0.5 + 0.5 * sin( k[1]*M_2PI );
	compref		$tmp58 k $const13 	%line{140} %argrw{"wrr"}
	mul		$tmp59 $tmp58 $const18 	%argrw{"wrr"}
	sin		$tmp57 $tmp59 	%argrw{"wr"}
	mul		$tmp60 $const17 $tmp57 	%argrw{"wrr"}
	add		y $const17 $tmp60 	%argrw{"wrr"}
# shaders/Flakes.osl:141
# 	float z = 0.5 + 0.5 * tan( k[1]*M_2PI );
	compref		$tmp62 k $const13 	%line{141} %argrw{"wrr"}
	mul		$tmp63 $tmp62 $const18 	%argrw{"wrr"}
	tan		$tmp61 $tmp63 	%argrw{"wr"}
	mul		$tmp64 $const17 $tmp61 	%argrw{"wrr"}
	add		z $const17 $tmp64 	%argrw{"wrr"}
# shaders/Flakes.osl:144
#     outColor = normalize(vector(x,y,z)*2-1)*0.5+0.5;  
	vector		$tmp66 x y z 	%line{144} %argrw{"wrrr"}
	mul		$tmp67 $tmp66 $const19 	%argrw{"wrr"}
	sub		$tmp68 $tmp67 $const8 	%argrw{"wrr"}
	normalize	$tmp65 $tmp68 	%argrw{"wr"}
	mul		$tmp69 $tmp65 $const17 	%argrw{"wrr"}
	add		outColor $tmp69 $const17 	%argrw{"wrr"}
# shaders/Flakes.osl:147
#     outColor[0] = IDs(outColor[0],4);
	compref		$tmp71 outColor $const1 	%line{147} %argrw{"wrr"}
	functioncall	$const21 139 	%argrw{"r"}
# shaders/Flakes.osl:36
# 	x = -1000 + x * 2000;
	mul		$tmp72 $tmp71 $const24 	%line{36} %argrw{"wrr"}
	add		$tmp71 $const25 $tmp72 	%argrw{"wrr"}
# shaders/Flakes.osl:37
# 	x = int(trunc(x));	
	trunc		$tmp74 $tmp71 	%line{37} %argrw{"wr"}
	assign		$tmp73 $tmp74 	%argrw{"wr"}
	assign		$tmp71 $tmp73 	%argrw{"wr"}
# shaders/Flakes.osl:38
# 	float x_ratio = noise("cell", vector(abs(x), abs(seed), 11)); 
	abs		$tmp76 $tmp71 	%line{38} %argrw{"wr"}
	abs		$tmp77 $const20 	%argrw{"wr"}
	assign		$tmp78 $tmp77 	%argrw{"wr"}
	vector		$tmp75 $tmp76 $tmp78 $const28 	%argrw{"wrrr"}
	noise		___353_x_ratio $const26 $tmp75 	%argrw{"wrr"}
# shaders/Flakes.osl:40
# 	return mix(0, 1, x_ratio);
	mix		$tmp70 $const2 $const8 ___353_x_ratio 	%line{40} %argrw{"wrrr"}
# shaders/Flakes.osl:147
#     outColor[0] = IDs(outColor[0],4);
	compassign	outColor $const1 $tmp71 	%line{147} %argrw{"wrr"}
	compassign	outColor $const1 $tmp70 	%argrw{"wrr"}
# shaders/Flakes.osl:148
#     outColor[1] = IDs(outColor[1],4);
	compref		$tmp80 outColor $const13 	%line{148} %argrw{"wrr"}
	functioncall	$const21 154 	%argrw{"r"}
# shaders/Flakes.osl:36
# 	x = -1000 + x * 2000;
	mul		$tmp81 $tmp80 $const24 	%line{36} %argrw{"wrr"}
	add		$tmp80 $const25 $tmp81 	%argrw{"wrr"}
# shaders/Flakes.osl:37
# 	x = int(trunc(x));	
	trunc		$tmp83 $tmp80 	%line{37} %argrw{"wr"}
	assign		$tmp82 $tmp83 	%argrw{"wr"}
	assign		$tmp80 $tmp82 	%argrw{"wr"}
# shaders/Flakes.osl:38
# 	float x_ratio = noise("cell", vector(abs(x), abs(seed), 11)); 
	abs		$tmp85 $tmp80 	%line{38} %argrw{"wr"}
	abs		$tmp86 $const20 	%argrw{"wr"}
	assign		$tmp87 $tmp86 	%argrw{"wr"}
	vector		$tmp84 $tmp85 $tmp87 $const28 	%argrw{"wrrr"}
	noise		___353_x_ratio $const26 $tmp84 	%argrw{"wrr"}
# shaders/Flakes.osl:40
# 	return mix(0, 1, x_ratio);
	mix		$tmp79 $const2 $const8 ___353_x_ratio 	%line{40} %argrw{"wrrr"}
# shaders/Flakes.osl:148
#     outColor[1] = IDs(outColor[1],4);
	compassign	outColor $const13 $tmp80 	%line{148} %argrw{"wrr"}
	compassign	outColor $const13 $tmp79 	%argrw{"wrr"}
# shaders/Flakes.osl:149
#     outColor[2] = IDs(outColor[2],1);
	compref		$tmp89 outColor $const5 	%line{149} %argrw{"wrr"}
	functioncall	$const21 169 	%argrw{"r"}
# shaders/Flakes.osl:36
# 	x = -1000 + x * 2000;
	mul		$tmp90 $tmp89 $const24 	%line{36} %argrw{"wrr"}
	add		$tmp89 $const25 $tmp90 	%argrw{"wrr"}
# shaders/Flakes.osl:37
# 	x = int(trunc(x));	
	trunc		$tmp92 $tmp89 	%line{37} %argrw{"wr"}
	assign		$tmp91 $tmp92 	%argrw{"wr"}
	assign		$tmp89 $tmp91 	%argrw{"wr"}
# shaders/Flakes.osl:38
# 	float x_ratio = noise("cell", vector(abs(x), abs(seed), 11)); 
	abs		$tmp94 $tmp89 	%line{38} %argrw{"wr"}
	abs		$tmp95 $const13 	%argrw{"wr"}
	assign		$tmp96 $tmp95 	%argrw{"wr"}
	vector		$tmp93 $tmp94 $tmp96 $const28 	%argrw{"wrrr"}
	noise		___353_x_ratio $const26 $tmp93 	%argrw{"wrr"}
# shaders/Flakes.osl:40
# 	return mix(0, 1, x_ratio);
	mix		$tmp88 $const2 $const8 ___353_x_ratio 	%line{40} %argrw{"wrrr"}
# shaders/Flakes.osl:149
#     outColor[2] = IDs(outColor[2],1);
	compassign	outColor $const5 $tmp89 	%line{149} %argrw{"wrr"}
	compassign	outColor $const5 $tmp88 	%argrw{"wrr"}
# shaders/Flakes.osl:151
#     outColor[2] = 0.5 + 0.5 *outColor[2];
	compref		$tmp97 outColor $const5 	%line{151} %argrw{"wrr"}
	mul		$tmp98 $const17 $tmp97 	%argrw{"wrr"}
	add		$tmp99 $const17 $tmp98 	%argrw{"wrr"}
	compassign	outColor $const5 $tmp99 	%argrw{"wrr"}
# shaders/Flakes.osl:154
# 	float h = -1000 + outColor[0]*2000;
	compref		$tmp100 outColor $const1 	%line{154} %argrw{"wrr"}
	mul		$tmp101 $tmp100 $const24 	%argrw{"wrr"}
	add		h $const25 $tmp101 	%argrw{"wrr"}
# shaders/Flakes.osl:155
# 	h = int(trunc(h));
	trunc		$tmp103 h 	%line{155} %argrw{"wr"}
	assign		$tmp102 $tmp103 	%argrw{"wr"}
	assign		h $tmp102 	%argrw{"wr"}
# shaders/Flakes.osl:156
# 	float Rehash = noise("cell", vector(abs(h), abs(16), 11)); 
	abs		$tmp105 h 	%line{156} %argrw{"wr"}
	abs		$tmp106 $const29 	%argrw{"wr"}
	assign		$tmp107 $tmp106 	%argrw{"wr"}
	vector		$tmp104 $tmp105 $tmp107 $const28 	%argrw{"wrrr"}
	noise		Rehash $const26 $tmp104 	%argrw{"wrr"}
# shaders/Flakes.osl:157
# 	Rehash = mix(0, 1, Rehash);
	mix		Rehash $const2 $const8 Rehash 	%line{157} %argrw{"wrrr"}
# shaders/Flakes.osl:158
# 	density > Rehash ? outColor = outColor : outColor = Base_Normal;	
	gt		$tmp109 density Rehash 	%line{158} %argrw{"wrr"}
	if		$tmp109 190 192 	%argrw{"r"}
	assign		$tmp108 outColor 	%argrw{"wr"}
	assign		outColor Base_Normal 	%argrw{"wr"}
	assign		$tmp108 outColor 	%argrw{"wr"}
# shaders/Flakes.osl:161
# 	outColor[0] > 0.5 or outColor[0] < 0.5 ? outAlpha = 1 : outAlpha = 0;
	compref		$tmp111 outColor $const1 	%line{161} %argrw{"wrr"}
	gt		$tmp112 $tmp111 $const17 	%argrw{"wrr"}
	neq		$tmp113 $tmp112 $const1 	%argrw{"wrr"}
	if		$tmp113 196 200 	%argrw{"r"}
	compref		$tmp114 outColor $const1 	%argrw{"wrr"}
	lt		$tmp115 $tmp114 $const17 	%argrw{"wrr"}
	neq		$tmp116 $tmp115 $const1 	%argrw{"wrr"}
	assign		$tmp113 $tmp116 	%argrw{"wr"}
	if		$tmp113 203 205 	%argrw{"r"}
	assign		outAlpha $const13 	%argrw{"wr"}
	assign		$tmp110 outAlpha 	%argrw{"wr"}
	assign		outAlpha $const1 	%argrw{"wr"}
	assign		$tmp110 outAlpha 	%argrw{"wr"}
# shaders/Flakes.osl:164
# 	outColor = mix(Base_Normal,outColor,randomize);
	mix		outColor Base_Normal outColor randomize 	%line{164} %argrw{"wrrr"}
	end
